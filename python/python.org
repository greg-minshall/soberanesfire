* using python for gis things

** using [[https://pypi.python.org/pypi/Shapely][shapely]]

the [[toblerity.org/shapely/manual.html][manual]] looks promising.  shapely.wkt.loads(), shapely.wkt.dumps()
are what we need.

use ogrinfo to get wkt.  somehow slice it so it just includes the heat
perimeter.  then, read those into shapely:

#+BEGIN_SRC python :results output
from shapely import wkt

f1 = open("20160806_Soberanes_IR_heat_perimeter.wkt", "r")
f2 = open("20160807_Soberanes_IR_heat_perimeter.wkt", "r")

x1 = wkt.loads(f1.read())
x2 = wkt.loads(f2.read())

y2 = x2.difference(x1)
print y2
#+END_SRC

#+RESULTS:


then, export it somehow in kml format.

** using osgeo

[[https://pcjericks.github.io/py-gdalogr-cookbook/geometry.html][nice cookbook]]

#+BEGIN_SRC python :results output
from osgeo import ogr

wkt = open("20160806_Soberanes_IR_heat_perimeter.wkt", "r").read()
pgons = ogr.CreateGeometryFromWkt(wkt)

kml = pgons.ExportToKML()
print kml

#+END_SRC

#+RESULTS:


** total flow?

read kml in osgeo, export to wkt1, import wkt1 to shapely, do
differences, export difference to wkt2, read wkt2 in osgeo, export to
kml.

*** extract-geom

so, 1 utility that extracts Heat Perimeter from a kml file, producing
a kml-geom file (to stdout)

*** diff-geom

1 utility that takes two kml-geom files, subtracts the second from the
first, writes the result as a kml-geom file (to stdout)

then, standard gump to glue the resulting files together to produce
the difference file.

#+BEGIN_SRC python :results output
from shapely import wkt
from osgeo import ogr

f1 = open("20160806_Soberanes_IR_heat_perimeter.wkt", "r")
f2 = open("20160807_Soberanes_IR_heat_perimeter.wkt", "r")

pgons1 = ogr.CreateGeometryFromWkt(f1.read())
pgons2 = ogr.CreateGeometryFromWkt(f2.read())

kml = pgons1.ExportToKML()
print kml

#+END_SRC

#+RESULTS:
: None

this prints the wkt of a layer/feature of a kml file

#+name: extractwkt.py
#+BEGIN_SRC python :tangle extractwkt.py
  from __future__ import print_function # for eprint() below

  import argparse
  import os
  import osgeo
  from osgeo import gdal
  from osgeo import ogr
  import sys

  # XXX
  # it would be nice to read direct from a .kmz (zip) file.  but it
  # doesn't seem like the current gdal/ogr supports that.
  # import zipfile
  # zf = zipfile.ZipFile("20160729_Soberanes_IR.kmz", "r")
  # print(zf)
  # zf.namelist()
  # ndoc = zf.open("doc.kml")
  # data = doc.read()
  # XXX

  # get layer name: Soberanes
  # get feature name: Heat Perimeter

  # from [[http://stackoverflow.com/a/14981125][stack exchange]]
  def eprint(*args, **kwargs):
      print(*args, file=sys.stderr, **kwargs)

  def main(argv):
      cmd = argv[0]
      parser = argparse.ArgumentParser(description="extract the well-known text (wkt) of a feature of a layer in a file")
      parser.add_argument('-l', '--layername', type=str, required=True,
                          help="name of desired layer (in file)")
      parser.add_argument('-f', '--featurename', type=str, required=True,
                          help="name of desired feature (within layer)")
      # use "type=str" since we use the file name for ogr.Open()
      parser.add_argument('ifile', type=str,
                          help="file to process")
      args = parser.parse_args();

      # make sure ifile is readable
      if not os.access(args.ifile, os.R_OK):
          eprint("input file '%s' cannot be read" % args.ifile)
          sys.exit(2)

      # get polygons from this file
      pgons = procfile(args.ifile, args.layername, args.featurename)
      # print(pgons)
      wkt = pgons.ExportToWkt()
      print(wkt)

  def procfile(filename, layername, featurename):
      """extract the polygon of a given feature in a given layer in a given file"""
      file = ogr.Open(filename)
      # print("this is %s data" % file.GetDriver().GetName())
      # print("there is/are %d layer(s)" % file.GetLayerCount())
      l = file.GetLayerByName(layername) # type(l) == OGRLayerH
      if l is None:
          eprint("layer '%s' is not found in file '%s'" % (layername, filename))
          sys.exit(3)
      l.ResetReading()
      # find the right feature
      found = False
      for featid in range(l.GetFeatureCount()):
          feature = l.GetFeature(featid); # type(feature) == OGRFeatureH
          fieldid = feature.GetFieldIndex("Name");
          name = feature.GetFieldAsString(fieldid);
          if (name == featurename):
              found = True
              break;
      if not found:
          eprint("feature name '%s' not found in layer '%s' in file '%s'" %
                 (featurename, layername, filename))
          sys.exit(3)
      # okay, we found the right feature.  now, find the polygon, maybe
      # a multigeometry
      geometry = feature.GetGeometryRef().Clone()
      return geometry

  if __name__ == "__main__":
      main(sys.argv)
#+END_SRC

#+RESULTS:

#+name: differencewkt
#+BEGIN_SRC python :tangle differencewkt.py
  from __future__ import print_function # for eprint() below

  import argparse
  import os
  import osgeo
  from osgeo import gdal
  from osgeo import ogr
  import sys
  from shapely import wkt

  # XXX
  # it would be nice to read direct from a .kmz (zip) file.  but it
  # doesn't seem like the current gdal/ogr supports that.
  # import zipfile
  # zf = zipfile.ZipFile("20160729_Soberanes_IR.kmz", "r")
  # print(zf)
  # zf.namelist()
  # ndoc = zf.open("doc.kml")
  # data = doc.read()
  # XXX

  # get layer name: Soberanes
  # get feature name: Heat Perimeter

  # from [[http://stackoverflow.com/a/14981125][stack exchange]]
  def eprint(*args, **kwargs):
      print(*args, file=sys.stderr, **kwargs)

  def main(argv):
      cmd = argv[0]
      parser = argparse.ArgumentParser(description="compute the set-theoretic difference: fileA \\ fileB")
      # use "type=str" since we use the file name for ogr.Open()
      parser.add_argument('fileA', type=argparse.FileType('r'),
                          help="base set")
      parser.add_argument('fileB', type=argparse.FileType('r'),
                          help="set to remove")
      args = parser.parse_args();

      geo1 = wkt.loads(args.fileA.read())
      geo2 = wkt.loads(args.fileB.read())

      print(geo1.is_valid)
      print(geo2.is_valid)
      geo3 = geo1.difference(geo2);

  if __name__ == "__main__":
      main(sys.argv)
#+END_SRC

try to figure out what's going on

#+BEGIN_SRC python
import shapely
import shapely.geometry

a = shapely.geometry.Point(1, 1).buffer(1.5)
b = shapely.geometry.Point(2,2).buffer(1.5)
c = a.difference(b)

#+END_SRC

#+RESULTS:
: None

