* using python for gis things

** using [[https://pypi.python.org/pypi/Shapely][shapely]]

the [[toblerity.org/shapely/manual.html][manual]] looks promising.  shapely.wkt.loads(), shapely.wkt.dumps()
are what we need.

use ogrinfo to get wkt.  somehow slice it so it just includes the heat
perimeter.  then, read those into shapely:

#+BEGIN_SRC python :results output
from shapely import wkt

f1 = open("20160806_Soberanes_IR_heat_perimeter.wkt", "r")
f2 = open("20160807_Soberanes_IR_heat_perimeter.wkt", "r")

x1 = wkt.loads(f1.read())
x2 = wkt.loads(f2.read())

y2 = x2.difference(x1)
print y2
#+END_SRC

#+RESULTS:


then, export it somehow in kml format.

** using osgeo

[[https://pcjericks.github.io/py-gdalogr-cookbook/geometry.html][nice cookbook]]

#+BEGIN_SRC python :results output
from osgeo import ogr

wkt = open("20160806_Soberanes_IR_heat_perimeter.wkt", "r").read()
pgons = ogr.CreateGeometryFromWkt(wkt)

kml = pgons.ExportToKML()
print kml

#+END_SRC

#+RESULTS:


** total flow?

read kml in osgeo, export to wkt1, import wkt1 to shapely, do
differences, export difference to wkt2, read wkt2 in osgeo, export to
kml.

*** extract-geom

so, 1 utility that extracts Heat Perimeter from a kml file, producing
a kml-geom file (to stdout)

*** diff-geom

1 utility that takes two kml-geom files, subtracts the second from the
first, writes the result as a kml-geom file (to stdout)

then, standard gump to glue the resulting files together to produce
the difference file.

#+BEGIN_SRC python :results output
from shapely import wkt
from osgeo import ogr

f1 = open("20160806_Soberanes_IR_heat_perimeter.wkt", "r")
f2 = open("20160807_Soberanes_IR_heat_perimeter.wkt", "r")

pgons1 = ogr.CreateGeometryFromWkt(f1.read())
pgons2 = ogr.CreateGeometryFromWkt(f2.read())

kml = pgons1.ExportToKML()
print kml

#+END_SRC

#+RESULTS:
: None

this prints the wkt of a layer/feature of a kml file

#+name: lf2wkt.py
#+BEGIN_SRC python :tangle lf2wkt.py
  from __future__ import print_function # for eprint() below

  import argparse
  import os
  import osgeo
  from osgeo import gdal
  from osgeo import ogr
  import sys

  # XXX
  # it would be nice to read direct from a .kmz (zip) file.  but it
  # doesn't seem like the current gdal/ogr supports that.
  # import zipfile
  # zf = zipfile.ZipFile("20160729_Soberanes_IR.kmz", "r")
  # print(zf)
  # zf.namelist()
  # ndoc = zf.open("doc.kml")
  # data = doc.read()
  # XXX

  # get layer name: Soberanes
  # get feature name: Heat Perimeter

  # from [[http://stackoverflow.com/a/14981125][stack exchange]]
  def eprint(*args, **kwargs):
      print(*args, file=sys.stderr, **kwargs)

  def main(argv):
      cmd = argv[0];
      parser = argparse.ArgumentParser()
      parser.add_argument('-l', '--layername', type=str, required=True,
                          help="name of desired layer")
      parser.add_argument('-f', '--featurename', type=str, required=True,
                          help="name of desired feature (within layer)")
      # use "type=str" since we use the file name for ogr.Open()
      parser.add_argument('ifiles', type=str, nargs='1')
      args = parser.parse_args();

      # make sure ifiles are all readable
      badfile = False
      for ifile in args.ifiles:
          if not os.access(ifile, os.R_OK):
              eprint("input file '%s' cannot be read" % ifile)
              badfile = True
      if badfile:
          sys.exit(2)
      if not os.access(args.output, os.W_OK):
          eprint("output file '%s' cannot be written" % args.output)
          sys.exit(2)

      # for first file, set base polygon to its polygon with initial color (white)
      pgons = [procfile(args.ifiles[0], args.layername, args.featurename)]
      # for each succeeding file before the last file, set the new polygon -
      # old to a new color
      for ifile in args.ifiles[1:len(args.ifiles)-1]:
          pgons = pgons + [procfile(ifile, args.layername, args.featurename)]
      # for the last file, set the last polygon - old polygon to the
      # terminal color (rust red)
      pgons = pgons + \
          [procfile(args.ifiles[len(args.ifiles)-1], args.layername, args.featurename)]

      # now write out a new KML file with the result.

      # much of this from http://www.gdal.org/ogr_apitut.html
      drv = gdal.GetDriverByName("KML");
      if drv is None:
          eprint("KML driver not found")
          sys.exit(4)
      ds = drv.Create(args.output, 0, 0, 0, gdal.GDT_Unknown)
      if ds is None:
          eprint("can't create output file %s" % args.output)
          sys.exit(2)
      layer = ds.CreateLayer("Perimeter", None, ogr.wkbMultiPolygon)
      if layer is None:
          eprint("can't create MultiPolygon layer");
          sys.exit(4)

      # need to define fields in feature before defining feature
      field_defn = ogr.FieldDefn("Name", ogr.OFTString)
      field_defn.SetWidth(32)     # XXX
      if layer.CreateField(field_defn) != 0:
          eprint("Creating name field failed")
          sys.exit(4)
      feature = ogr.Feature(layer.GetLayerDefn())
      feature.SetField("Name", args.featurename) # XXX
      n = len(pgons)
      # sometimes geometries are invalid:
      # https://trac.osgeo.org/geos/wiki/TopologyExceptions
      for i in range(len(pgons)):
          print(pgons[i].IsValid())
      x = pgons[1].Difference(pgons[0])
      feature.SetGeometry(x)
      if layer.CreateFeature(feature) != 0:
          eprint("failed to create feature in KML file")
          sys.exit(4)
      ds = None                   # causes gdal.Close()

  def procfile(filename, layername, featurename):
      """extract the polygon of a given feature in a given layer in a given file"""
      file = ogr.Open(filename)
      # print("this is %s data" % file.GetDriver().GetName())
      # print("there is/are %d layer(s)" % file.GetLayerCount())
      l = file.GetLayerByName(layername) # type(l) == OGRLayerH
      if l is None:
          eprint("layer '%s' is not found in file '%s'" % (layername, filename))
          sys.exit(3)
      l.ResetReading()
      # find the right feature
      found = False
      for featid in range(l.GetFeatureCount()):
          feature = l.GetFeature(featid); # type(feature) == OGRFeatureH
          fieldid = feature.GetFieldIndex("Name");
          name = feature.GetFieldAsString(fieldid);
          if (name == featurename):
              found = True
              break;
      if not found:
          eprint("feature name '%s' not found in layer '%s' in file '%s'" %
                 (featurename, layername, filename))
          sys.exit(3)
      # okay, we found the right feature.  now, find the polygon, maybe
      # a multigeometry
      geometry = feature.GetGeometryRef().Clone()
      return geometry

  if __name__ == "__main__":
      main(sys.argv)
#+END_SRC

#+RESULTS:

