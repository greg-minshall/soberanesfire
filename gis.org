* trying to learn GIS
** platforms
*** R

[[http://gis.stackexchange.com/questions/45327/tutorials-to-handle-spatial-data-in-r][learning R/gis]]

*** Python

[[http://www.uclmail.net/users/babayoshihiko/fink/qgis/index.html][this page]] (by Baba Yoshihiko!) gives a clue on how to run python/qgis
under fink.  but, get a missing _SSLv2_client_method when doing
"import qgis" with *this* PYTHONPATH:
#+BEGIN_QUOTE
/Users/minshall/usr/lib/python:/sw/lib/python2.7/site-packages:/Users/minshall/usr/lib/python/anki:/sw/Applications/QGIS-py27-2.14.1.app/Contents/Resources/python:/sw/lib/qt4-x11/lib:/sw/share/qgis214-py27/plugins/
#+END_QUOTE

this is "normal" PYTHONPATH
#+BEGIN_QUOTE
/Users/minshall/usr/lib/python:/sw/lib/python2.7/site-packages:/Users/minshall/usr/lib/python/anki
#+END_QUOTE

#+BEGIN_EXAMPLE
PYTHONPATH=/sw/share/qgis214-py27/plugins:/sw/Applications/QGIS-py27-2.14.1.app/Contents/Resources/python:/sw/lib/qt4-mac/lib/python2.7/site-packages
#+END_EXAMPLE

that also doesn't work.  "sudo fink update pyqt4-mac-py27".
(_SSLv2_client_method [[http://stackoverflow.com/questions/36637229/why-wont-anaconda-jupyter-ipython-notebook-launch/36749855][appears]] to be old.)

actually, just "import ssl" doesn't work in python2.7.  it *does* work
in python2.6.  so, "sudo fink update python27 python27-shlibs" also,
"python".  "import ssl" now works.

but, "import qgis" gives same error.  could it be that when i
built/installed qgis, it somehow used some old (pre-update) library?


so, "fink update-all"

in the meantime...
#+BEGIN_EXAMPLE
>>> import osgeo
>>> wkt1 = "POLYGON ((1208064.271243039 624154.6783778917, 1208064.271243039 601260.9785661874, 1231345.9998651114 601260.9785661874, 1231345.9998651114 624154.6783778917, 1208064.271243039 624154.6783778917))"
>>> wkt2 = "POLYGON ((1199915.6662253144 633079.3410163528, 1199915.6662253144 614453.958118695, 1219317.1067437078 614453.958118695, 1219317.1067437078 633079.3410163528, 1199915.6662253144 633079.3410163528)))"
>>> from osgeo import ogr
>>> poly1 = ogr.CreateGeometryFromWkt(wkt1)
>>> poly2 = ogr.CreateGeometryFromWkt(wkt2)
>>> intersection = poly1.Intersection(poly2)
>>> poly1
<osgeo.ogr.Geometry; proxy of <Swig Object of type 'OGRGeometryShadow *' at 0x116b5e240> >
>>> intersection
<osgeo.ogr.Geometry; proxy of <Swig Object of type 'OGRGeometryShadow *' at 0x116b5e4e0> >
>>> poly1.Intersection
<bound method Geometry.Intersection of <osgeo.ogr.Geometry; proxy of <Swig Object of type 'OGRGeometryShadow *' at 0x116b5e240> >>
>>> poly1.Union
<bound method Geometry.Union of <osgeo.ogr.Geometry; proxy of <Swig Object of type 'OGRGeometryShadow *' at 0x116b5e240> >>
>>> poly1.Difference
<bound method Geometry.Difference of <osgeo.ogr.Geometry; proxy of <Swig Object of type 'OGRGeometryShadow *' at 0x116b5e240> >>
>>> 
#+END_EXAMPLE
so, apparently, osgeo will do what i like.  now, how do i read in a
kml file?

[[https://docs.python.org/2/library/zipfile.html][here]] is how to get read a zip file, in order to access to the KML file
in a Soberanes kmz (zip) file:
#+BEGIN_EXAMPLE
>>> import zipfile
>>> zipfile.ZipFile
<class 'zipfile.ZipFile'>
>>> zf = zipfile.ZipFile("20160729_Soberanes_IR.kmz", "r")
>>> zf
<zipfile.ZipFile object at 0x103a85450>
>>> zf.namelist()
['doc.kml', 'isolated_heat.png', 'NIRlogo.gif', 'legend.png', '[Content_Types].xml']
>>> doc = zf.open("doc.kml")
>>> doc
<zipfile.ZipExtFile object at 0x103a854d0>
>>> doc.read()
lots of data
>>> from pykml import parser
>>> doc = zf.open("doc.kml")
>>> root = parser.fromstring(doc.read())

#+END_EXAMPLE

to read a kml file, install [[http://pythonhosted.org/pykml/index.html][pykml]]; need to do (?) as sudo.

now, how to get parsed KML file into an osgeo/ogr object?  [[http://trac.osgeo.org/gdal/wiki/Release/1.5.0-News][apparently]]
there is an ogr.CreateGeometryFromKML in GDAL (ver. 1.5.0?).  so,
maybe don't need pykml, after all.

#+BEGIN_EXAMPLE
>>> f = ogr.Open("doc.kml")
>>> f is None
False
>>> f.GetDriver()
<osgeo.ogr.Driver; proxy of <Swig Object of type 'OGRDriverShadow *' at 0x1024bdab0> >
>>> f.GetDriver().GetName()
'KML'
>>> f.GetName()
'doc.kml'
>>> f.getLayerCount
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/sw/lib/python2.7/site-packages/osgeo/ogr.py", line 546, in <lambda>
    __getattr__ = lambda self, name: _swig_getattr(self, DataSource, name)
  File "/sw/lib/python2.7/site-packages/osgeo/ogr.py", line 57, in _swig_getattr
    raise AttributeError(name)
AttributeError: getLayerCount
>>> f.GetLayerCount()
1
>>> f.GetLayer(1)
>>> range(1)
[0]
>>> f.GetLayer(0)
<osgeo.ogr.Layer; proxy of <Swig Object of type 'OGRLayerShadow *' at 0x1024b3cf0> >
>>> f.GetLayer(0).GetLayerDefn()
<osgeo.ogr.FeatureDefn; proxy of <Swig Object of type 'OGRFeatureDefnShadow *' at 0x1024b3ba0> >
>>> f.GetLayer(0).GetLayerDefn().GetName()
'Soberanes'
#+END_EXAMPLE

gdal comes with a sample ogrinfo.py that is fairly useful.  it prints
out its report in [[https://en.wikipedia.org/wiki/Well-known_text][WKT]] format.

[[http://gis.stackexchange.com/questions/141966/python-gdal-ogr-open-or-driver-open][apparently]] you can force ogr to open in a specific format.

question now is: i can open the zip (.kmz) file and read the
contents.  and, given doc.kml, i can get that into ogr.  but, i don't
know how to get the doc.kml into ogr (without actually extracting the
archive, which i'd aestheticly rather not do).

there's something called [[http://www.paolocorti.net/2012/03/08/gdal_virtual_formats/][gdal virtual formats]].  there *is* a [[https://trac.osgeo.org/gdal/wiki/UserDocs/ReadInZip][zip
virtual format]].  it can't deal with an extenson .kmz, but can find the
file if it is renamed to .zip:
#+BEGIN_EXAMPLE
bash greg-minshalls-mbp-2: {1492} ogrinfo /vsizip/foo.zip/doc.kml
ERROR 1: Random access not supported for /vsizip
Had to open data source read-only.
INFO: Open of `/vsizip/foo.zip/doc.kml'
      using driver `KML' successful.
1: Sobranes
#+END_EXAMPLE
[[http://www.gdal.org/cpl__vsi_8h.html][/vsimem]] might be useful.  there are also /vsicurl, /vsis3 (Amazon S3)

we want to create a [[http://www.gdal.org/ogr__api_8h.html][OGRDataSourceH]] (which is what everything works
on).

probably one can't really do this in the current situation.  so, just
assume files are extracted.

for cgal, there doesn't seem to [[https://github.com/CGAL/cgal-swig-bindings/wiki/Package_wrappers_available][really]] exist python bindings.

*** C++

following the [[http://doc.cgal.org/latest/Manual/installation.html][instructions for cgal]], did
#+BEGIN_EXAMPLE
cgal_create_CMakeLists -s executable
# need BOOST_
BOOST_INCLUDEDIR=/sw/opt/boost-1_58/include cmake -DCGAL_DIR=~/src/import/cgal/CGAL-4.8.1/ .
make
#+END_EXAMPLE

but, this seems to work:
#+BEGIN_EXAMPLE
g++ -lCGAL -lgmp -L/sw/lib -I/sw/include -I/sw/opt/boost-1_58/include -I~/src/import/cgal/CGAL-4.8.1/ cgal-play.cpp
#+END_EXAMPLE

*** awk

actually, it's just one line in each file that needs to be extracted.

#+BEGIN_SRC awk :in-file ~/work/gis/play/IR/20160808_Soberanes_IR/doc.kml :results output verbatim
  BEGIN {
      trigger = 0;
  }

  /Heat Perimeter/ {
      trigger = 1;
  }

  trigger == 1 && /Polygon/ {
      print $0
      exit;
  }
#+END_SRC

** files formats
*** KML

need to produce a kml file.  actually, producing *any* sort of file,
especially a shapefile, would be a step in the right direction.

[[https://developers.google.com/kml/articles/vector][here]] is a note on producing a KML file using GDAL.  but, it assumes
you already have, e.g., a shapefile you're trying to convert.

[[http://www.gdal.org/ogr_apitut.html][here]] is a tutorial on how to (read and how to) create a shapefile.
OGR_DS_CreateLayer() appears to be a key part.  here you say what kind
of geometry you are using.  Van used Polygons, having different
layers, i guess, for the different (isolated) areas from the same
days.  the files from Calfire use Multipolygons.  Van's way gives you
finer control of what to see, but probably he did it because his older
software found that easier, or his own custom is to do that.

hmm: find driver using GDALGetDriverByName(), do GDALCreate() to
create a GDALDatasetH with this driver.  then use OGR_DS_CreateLayer()
to create an OGRLayerH, the output layer.

(there's a python code example at the end of the tutorial.)

then, fought a problem that turned out to be caused by my input .kml
files not being in the correct format.  in particular, the polygons
were specified with the Z coordinate having a "," (comma) rather than
a " " (space) after it.  modified update.sh to handle this.

then, it turns out that taking the difference of two (multi)polygons
results in a set difference of the polygon edges, rather than areas.
there are routines like [[http://www.gdal.org/gdal__alg_8h.html][GDALRasterizeGeometries]] that can put one into
a raster.

in ogr, there is a [[www.gdal.org/ogr__core_8h.html][wkbSurface]], et al., but they don't seem to be in
use.

[[http://www.sciencedirect.com/science/article/pii/S0747717113001272][A procedure for computing the symmetric difference of regions defined
by polygonal curves]] is a paper by Miguel Belbut Gaspar and Nelson
Martins-Ferreira on how to do this computation, from Journal of
Symbolic Computation Volumes 61–62, February–March 2014, Pages 53–65,

[[http://www.cgal.org/][CGAL]] has [[http://doc.cgal.org/latest/Boolean_set_operations_2/index.html][this]] function.  [[http://www.sfcgal.org/][sfcgal]] is some wrapper on cgal trying to
provide [[http://www.opengeospatial.org/standards/sfa][OGC "Simple Feature Access"]].  but, we probably need to
translate between gdal and cgal formats.

there's something called [[http://www.pyngl.ucar.edu/index.shtml][PyNGL and PyNIO]], not really relevant.

*** KMZ

a [[https://developers.google.com/kml/documentation/kmzarchives][kmz]] file should contain only one .kml file; it need not be called
"doc.kml", though that's probably fairly common.

** colors

i'd like to use [[http://colorbrewer2.org/][Color Brewer]] (more [[http://www.personal.psu.edu/cab38/ColorBrewer/ColorBrewer_intro.html][info here]]), but the packages seem
either [[https://pypi.python.org/pypi/colorbrewer][old]], or [[http://stanford.edu/~mwaskom/software/seaborn/index.html][require]] matplotlib (and, possibly, don't actually give
you access to color numbers).  [[https://github.com/dsc/colorbrewer-python][colorbrewer-python]] might be the way to
go, though it is just the data.

** future

point it at a web site, the [[http://ftp.nifc.gov/incident_specific_data/calif_s/CALFIRE/2016_Incidents/CA-BEU-003422_Soberanes/IR/20160803/][parent of all the Soberanes incidents]],
say, and at a local directory, and then the script downloads what's
not already downloaded, determines the incident name by majority vote
of all the downloaded reports, then produces the change map.  thus,
the script is incident independent.

[[http://www.geosensor.net/papers/duckham08.PR.pdf][this paper]] describes how to build a "concave hull" (from [[http://gis.stackexchange.com/q/1200][this question]]
on stackexchage).  maybe cgal [[http://doc.cgal.org/latest/Manual/packages.html#PkgAlphaShape2Summary][provides]] something similar?

** cleaning up input

[[http://grokbase.com/t/r/r-sig-geo/12cezp33rh/cleaning-up-self-intersections][here]] is a 2012/2013 discussion of cleaning up polygons.
** GIS: projection and datum

[[https://www.maptoaster.com/maptoaster-topo-nz/articles/projection/datum-projection.html][here]] is an introduction.  different datum's give you different
latitude/longitude lines!  projections just specify how those lines
are displayed on a 2-dimensional map.  

[[http://www.linz.govt.nz/data/geodetic-system/datums-projections-and-heights/geodetic-datums/new-zealand-geodetic-datum-2000-nzgd2000][apparently]] New Zealand's new datum, NZGD2000, is fixed to the plate on
which NZ sits, so moves w.r.t., e.g., WGS84.  so, converting between
NZGD2000 and, e.g., WGS84, one needs to know that date as well as
coordinates.  the above article says that from 2000 to 2015 about 75cm
of movement has occurred.  here is a table describing NZGD200:

| Abbreviation        | NZGD2000               |
| Reference ellipsoid | [[http://www.linz.govt.nz/data/geodetic-system/datums-projections-and-heights/geodetic-datums/reference-ellipsoids][GRS80]]                  |
| Reference frame     | ITRF96                 |
| Reference epoch     | 1 January 2000         |
| Deformation model   | [[http://www.linz.govt.nz/data/geodetic-system/datums-projections-and-heights/geodetic-datums/new-zealand-geodetic-datum-2000-nzgd2000/nzgd2000-deformation][LINZ deformation model]] | 

the [[http://www.linz.govt.nz/data/geodetic-system/datums-projections-and-heights/geodetic-datums/reference-ellipsoids][GRS80]] page says that an ellipsoidal model of the earth *can* be
off by as much as 100 meters (at some locations, presumably).  


[[http://resources.esri.com/help/9.3/ArcGISEngine/dotnet/89b720a5-7339-44b0-8b58-0f5bf2843393.htm][ESRI's page]] is good.

(the [[https://developers.google.com/kml/documentation/kmlreference#elements-specific-to-model][entry for <Model>]] in the KML reference documentation implies that
KML's lat/lon's are WGS84.  and, [[https://en.wikipedia.org/wiki/Keyhole_Markup_Language][the KML Wikipedia page]] confirms that.)

[[http://epsg.io/4326][epsg.4326]]: "WGS 84 -- WGS84 - World Geodetic System 1984, used in GPS"

geofabrik has a [[http://tools.geofabrik.de/map/#2/-71.5688/15.4814&type=Geofabrik_Standard&grid=1][nice page]] showing tiles and coordinates.  in fact, y=0
implies 85.0511.

[[https://en.wikipedia.org/wiki/Web_Mercator][Web Mercator]] is in here, also.

[[http://www.maplesoft.com/applications/view.aspx?SID=4892&view=html][dynamics on a sphere]] (Maplesoft)
