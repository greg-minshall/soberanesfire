#+title: work with CGAL
#+property: noweb tangle

# to get c++, you *enable* C, then *say* C++
# http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-C.html

# www.cems.uvm.edu/~rsnapp/teaching/cs274/src/triangles/triangles.html

#+name: caution
#+begin_src text
CAUTION: The content of this file is automatically generated by Emacs orgmode
from the file triangles.org that should either be in this, or the parent
directory. Consequently, any modifications made to this file will likely be
ephemeral. Please edit cgal.org instead.
#+end_src


#+BEGIN_SRC C++ :tangle cgal-play.cpp :noweb tangle
// <<caution>>

#include <iostream>
#include <CGAL/Simple_cartesian.h>
typedef CGAL::Simple_cartesian<double> Kernel;
typedef Kernel::Point_2 Point_2;
typedef Kernel::Segment_2 Segment_2;
int main()
{
  Point_2 p(1,1), q(10,10);
  std::cout << "p = " << p << std::endl;
  std::cout << "q = " << q.x() << " " << q.y() << std::endl;
  std::cout << "sqdist(p,q) = " 
            << CGAL::squared_distance(p,q) << std::endl;
  
  Segment_2 s(p,q);
  Point_2 m(5, 9);
  
  std::cout << "m = " << m << std::endl;
  std::cout << "sqdist(Segment_2(p,q), m) = "
            << CGAL::squared_distance(s,m) << std::endl;
  std::cout << "p, q, and m ";
  switch (CGAL::orientation(p,q,m)){
  case CGAL::COLLINEAR: 
    std::cout << "are collinear\n";
    break;
  case CGAL::LEFT_TURN:
    std::cout << "make a left turn\n";
    break;
  case CGAL::RIGHT_TURN: 
    std::cout << "make a right turn\n";
    break;
  }
  std::cout << " midpoint(p,q) = " << CGAL::midpoint(p,q) << std::endl;
  return 0;
}
#+END_SRC

#+RESULTS:

